package durf;

import java.util.Random;
import java.util.Scanner;
/**
Michael Durfee - CSS161 - Professor Nash - 14DEC2015 - Final All-in-one Homework: Shot in the Dark.

Welcome to Shot in the Dark. Here is some psudocode to summarize how this game works.
Player sets locations of target(s) on int[][] target.
Firing (input coordinates) at locations on int[][] dark and changing values to be displayed as different symbols indicating where the user "fires" at.
Compairing the location of the shot to the location on int[][] dark to int[][] target see if it is the same location.
The computer takes a random shot at the dark (changing the symbol).
Compairing the location of the shot to int[][] target to see if it is a target.
Whoever shoots the last target wins.
 */
public class NewEnd {
    /**
    This final variable determines:
    How big the board is.
    The column and row headers for the board.
    The parameters for the random intigers for: Target placement / Computer random guesses / Method for printing the board.
     */
    public static final int S = 6;
    public static void main(String[] args) {
        int[][] dark = new int[S][S];//Declars the 2D array which both Player One and Computer will fire at.
        int[][] target = new int[S][S];//Declares the 2D array where either the index contains a target '1' or does not '-1'.
        int pScore;
        int cScore;
        boolean stillPlaying = true;//This boolean will be active as long as there are targets witin the 'target' array.
        Scanner ibu = new Scanner(System.in);//Initializes the scanner object.
        Random rand = new Random();//Initializes the random object.

        System.out.println("Welcome to Shot in the Dark! Where the only tactic is to spray and pray!");//Start program prompt.

        initializeBoard(dark);//Initializes all indexes in the 2D 'dark' array as -1 that is neither shot or a hit target.
        initializeBoard(target);//Initializes all indexes in the 2D 'target' array as -1 that .

        System.out.println("Select how many targets you want to engage:");//Prompts the user to select the amnount of targets that will be intialized in the target array.
        System.out.println("(1) 1 Target (Hard)");//Equal chance you or the computer will hit the target.
        System.out.println("(2) 2 Target (Moderate)");//Player has more of a chance to hit both targets.
        System.out.println("(3) 3 Target (Easy)");//Player has a good chance to guess where the target is.
        int targetAmount = ibu.nextInt();//Assigns the choice of how many targets the user wants to fire at.
        setTrgt(target, targetAmount);//Sends the selection the user chooses to the setTrgt method.

        System.out.println("OPEN FIRE!!!");//prompt that the game has begun.
        displayBoard(dark);//Displays the current values and coorisponding symbols of the state of the dark board.
        while (stillPlaying == true) {
            System.out.println("Player One enter the COLUMN (LEFT NUMBERS) you want to shoot:");//First coordinate the player enters coorisponds to the column.
            int col = ibu.nextInt();
            System.out.println("Enter the ROW (TOP NUMBERS) you want to shoot:");//Second coordinate coorisponds to the row.
            int row = ibu.nextInt();
            dark[col][row] = 0;//Takes those values
            targetAmount = playerHitCheck(target, dark, pScore, row, col, targetAmount);//The target amount is decreased each time a successful hit is registered.
            stillPlaying = gameOver(targetAmount);//If the target amount reaches zero the game is over.
            if (stillPlaying == false){//This if statement is so if the prior coordinates entered by the player hits the last target on the dark array, it will break out of the loop and the game will end.
                break;
            }
            playerScoreCheck(target, dark, pScore, row, col, targetAmount);  /////////////////////////////////////////////////////////
            System.out.print("The computer is firing at ");
            int randomNumberY = rand.nextInt(S);//Randomly generates the intiger used for the column that is within the boundries of the board.
            int randomNumberX = rand.nextInt(S);//Randomly generates the intiger used for the row that is within the boundries of the board.
            dark[randomNumberY][randomNumberX] = 0;//
            System.out.println("COLUMN " + randomNumberY + " and ROW " + randomNumberX + "!");
            targetAmount = computerHitCheck(target, dark, cScore, randomNumberX, randomNumberY, targetAmount);
            stillPlaying = gameOver(targetAmount);
            computerScoreCheck(target, dark, cScore, row, col, targetAmount);  /////////////////////////////////////////////////////////
        }        
        scoreCheck(pScore,cScore,1);
    }

    public static boolean scoreCheck(int a, int b, int targetAmount) {//This method checks to see if a argued value is contained within an (int) array.
        if(a > b){
            System.out.println("Game Over! Player One wins!");
        }
        else if (b > a) {
            System.out.println("Game Over! The Computer wins!");
        }
        else if (a == b){
            System.out.println("The game was a draw!");
        }
        System.out.println("Would you like to play again?");                        
    }

    ////////////////////////////////////////////////////////////////////////////////////////////changed int shot to shipAmount
    public static boolean gameOver(int shipAmount) {
        boolean win = true;
        if (shipAmount == 0) {
            win = false;
        }        
        return win;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////new method that will change pScore on a hit
        public static int playerScoreCheck(int[][] a, int[][] b, int c, int row, int col, int targetAmount) {
        if (a[col][row] == 1) {
            a[col][row] = 2;
            b[col][row] = 2;
            c++; //increases pScore by one
            System.out.println("Your score is now: " + c);   
            System.out.println("There are " + targetAmount + " amount of targets left"); 
        }
        return c; /////////////////////////////////////////////////////////changes pScore to the new value
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////new method that will change cScore on a hit
        public static int computerScoreCheck(int[][] a, int[][] b, int d, int row, int col, int targetAmount) {
        if (a[col][row] == 1) {
            a[col][row] = 2;
            b[col][row] = 2;
            d++; //increases pScore by one
            System.out.println("The computer's score is now: " + d);      
            System.out.println("There are " + targetAmount + " amount of targets left"); 
        }
        return d; /////////////////////////////////////////////////////////changes cScore to the new value
    }

    public static int playerHitCheck(int[][] a, int[][] b, int[] c, int row, int col, int shot) {
        if (a[col][row] == 1) {
            a[col][row] = 2;
            b[col][row] = 2;
            c[0] = 1;
            System.out.println("The shot at COLUMN " + col + " and ROW " + row + " HIT THE TARGET!");        
            shot--;
        }
        else {
            System.out.println("Your shot missed! Reload!");
        }
        displayBoard(b);
        return shot;
    }

    public static int computerHitCheck(int[][] a, int[][] b, int[] c, int row, int col, int shot) {
        int index = 0;
        if (a[col][row] == 1) {
            a[col][row] = 2;
            b[col][row] = 2;
            c[index++] = 0;
            System.out.println("The shot at COLUMN " + col + " and ROW " + row + " HIT THE TARGET!");        
            shot--;
        }
        else {
            System.out.println("The computer's shot missed!");
        }        
        displayBoard(b);
        return shot;
    }

    public static void displayBoard(int[][] in) 
    /**
    Each time an array is passed into this method it cycles through each index and will print different symbols
    according to the value of that index.
     */
    {
        for(int i = 0; i < S; i++) {
            System.out.print("\t" + i);//Prints the row (on top) numbers on the board.
        }
        System.out.println();
        for (int col = 0; col < S; col++) {
            System.out.print((col) + "");//Prints the column (on the left).
            for (int row = 0; row < S; row++) {
                if(in[col][row] == -1) {//Origional initialized value of both target and dark array.
                    System.out.print("\t" + "#");//Default symbol where index position is neither shot or a hit target.
                }
                else if(in[col][row] == 0) {
                    System.out.print("\t" + "X");//Will be displayed if the computer or the Player has "shot" this location.
                }
                else if(in[col][row] == 1) {
                    System.out.print("\t" + "S");
                }
                else if(in[col][row] == 2) {
                    System.out.print("\t" + "!");
                }
            }
            System.out.println();//Return to next line after all indexes has been cycled through the row.
        }
    }

    public static void initializeBoard(int[][] in) {//This method sets all index values within an array equal to -1 which will display as a neutral "~"
        for (int y = 0; y < in.length; y++){
            for (int x = 0; x < in.length; x++){
                in[x][y] = -1;
            }
        }
    }

    public static int[][] setTrgt(int[][] in, int selection)
    /**
    This method randomly generates locations for the amount of targets that the player 
    chooses they want to shoot at.
     */
    {
        Random rand = new Random();
        switch(selection) {
            case 1:
            if(selection == 1) {
                int oneTrgtY = rand.nextInt(S);
                int oneTrgtX = rand.nextInt(S);
                in[oneTrgtY][oneTrgtX] = 1;
                System.out.println("The target is located at COLUMN " + oneTrgtY + " and ROW " + oneTrgtX);//Displays the randomly generated locations of the targets for troubleshooting purposes.
            }
            break;
            case 2:
            if(selection == 2) {
                int twoTrgt1Y = rand.nextInt(S);
                int twoTrgt1X = rand.nextInt(S);
                in[twoTrgt1Y][twoTrgt1X] = 1;
                int twoTrgt2Y = rand.nextInt(S);
                int twoTrgt2X = rand.nextInt(S);
                in[twoTrgt2Y][twoTrgt2X] = 1;
                System.out.println("The target is located at COLUMN " + twoTrgt1Y + " and ROW " + twoTrgt1X);//Displays the randomly generated locations of the targets for troubleshooting purposes.
                System.out.println("The target is located at COLUMN " + twoTrgt2Y + " and ROW " + twoTrgt2X);
            }
            break;
            case 3:
            if(selection == 3) {
                int threeTrgt1Y = rand.nextInt(S);
                int threeTrgt1X = rand.nextInt(S);
                in[threeTrgt1Y][threeTrgt1X] = 1;
                int threeTrgt2Y = rand.nextInt(S);
                int threeTrgt2X = rand.nextInt(S);
                in[threeTrgt2Y][threeTrgt2X] = 1;
                int threeTrgt3Y = rand.nextInt(S);
                int threeTrgt3X = rand.nextInt(S);
                in[threeTrgt3Y][threeTrgt3X] = 1;
                //System.out.println("The target is located at COLUMN " + threeTrgt1Y + " and ROW " + threeTrgt1X);//Displays the randomly generated locations of the targets for troubleshooting purposes.
                //System.out.println("The target is located at COLUMN " + threeTrgt2Y + " and ROW " + threeTrgt2X);
                //System.out.println("The target is located at COLUMN " + threeTrgt3Y + " and ROW " + threeTrgt3X);
            }
        }        
        return in;
    }
}
